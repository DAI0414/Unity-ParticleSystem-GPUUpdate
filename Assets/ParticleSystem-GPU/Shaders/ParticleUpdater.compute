#pragma kernel update
#pragma kernel bridge
#pragma kernel gathered

#include "ParticleSystem.Particle.cginc"

struct vData
{
    float3 pos;
    float3 normal;
    float2 uv;
};

RWStructuredBuffer<Particle> _Particles;
StructuredBuffer<vData> _TargetData;
float dt;
float3 mousePos;
float attraction;
uint numVerts;

[numthreads(8, 1, 1)]
void update(uint3 id : SV_DispatchThreadID)
{
    Particle p = _Particles[id.x];
    float3 to = mousePos - p.position;
    float dst = max(0.0001, length(to));
    float3 force = normalize(to) * dst * dt * 10;
    p.velocity += force * attraction;
    //p.velocity *= frac((float)p.randomSeed * dt *0.001);
    p.startColor = (p.randomSeed & 0x00FFFFFF) + 0xFF000000;
    _Particles[id.x] = p;
}

[numthreads(16, 1, 1)]
void bridge(uint3 id : SV_DispatchThreadID)
{
    Particle p = (Particle) 0;
    p.position = half3(1, 1, 1);
    p.velocity = half3(1, 1, 1);
    p.animatedVelocity = half3(1, 1, 1);
    p.axisOfRotation.xyz = half3(0, 1, 2);
    p.rotation3D = half3(0, 1, 2); //C#上でparticle.rotation3Dは、1rad = 57.29578degに、変換される。つまり、ラジアンで入力する
    p.angularVelocity3D = half3(2, 1, 0.5);
    p.startSize3D = half3(2, 3, 1);
    p.startColor = Particle_ColorToUint(half4(1.0, 0.5, 0.75, 0.5));
    p.randomSeed = 2;
    p.remainingLifetime = 10;
    p.startLifetime = 20;
    _Particles[id.x] = p;
}

[numthreads(8,1,1)]
void gathered(uint3 id : SV_DispatchThreadID)
{
    Particle p = _Particles[id.x];
    vData targetData = _TargetData[p.randomSeed % numVerts];
    float normalizedLifetime = (p.startLifetime - p.remainingLifetime) / p.startLifetime;
    float3 to = targetData.pos - p.position;
    float dst = length(to);
    float3 force = to * 0.1;
    float t = saturate(2.0 * normalizedLifetime);
    p.velocity *= (1.0 - t * 0.2);
    p.velocity += force;
    p.position = lerp(p.position, targetData.pos, t * t);
    _Particles[id.x] = p;
}